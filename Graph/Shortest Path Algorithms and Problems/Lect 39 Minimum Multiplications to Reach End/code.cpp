// Problem: Minimum Multiplications to Reach End
// Article Link: https://takeuforward.org/graph/g-39-minimum-multiplications-to-reach-end/


// N = size of the array with numbers of which each node could be multiplied


// Time Complexity : O(100000 * N) 
// Reason: Where '100000' are the total possible numbers generated by multiplication (hypothetical)


// Space Complexity :  O(100000 * N) + O(100000) ~ O(100000 * N)
// Reason: O(100000) for 'distTo' vector and O(100000 * N) for '100000 * N' is the max possible 'q' queue size. Where '100000' are the total possible numbers generated by multiplication (hypothetical)


// Approach: Simple Dijsktra's Algorithm


#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    int minimumMultiplications(vector<int> &arr, int start, int end) {
        // Create a queue for storing the numbers as a result of multiplication
        // of the numbers in the array and the start number.
        queue<pair<int, int>> q;
        q.push({start, 0});

        // Create a 'distTo' array to store the no. of multiplications to reach
        // a particular number from the start number.
        vector<int> distTo(100000, 1e9);
        distTo[start] = 0;
        int mod = 100000;

        // Multiply the start no. with each of numbers in the arr
        // until we get the end no.
        while (!q.empty()) {
            int node = q.front().first;
            int steps = q.front().second;
            q.pop();

            for (auto it: arr) {
                int num = (it * node) % mod;

                // If the no. of multiplications are less than before
                // in order to reach a number, we update the 'distTo' array.
                if (steps + 1 < distTo[num]) {
                    distTo[num] = steps + 1;

                    // Whenever we reach the end number
                    // return the calculated steps
                    if (num == end) return steps + 1;

                    q.push({num, steps + 1});
                }
            }
        }
        // If the end no. is unattainable.
        return -1;
    }
};

int main() {
    // Driver Code.
    int start = 3, end = 30;
    vector<int> arr = {2, 5, 7};

    Solution obj;
    int ans = obj.minimumMultiplications(arr, start, end);

    // Output: 2
    cout << ans << endl;
    return 0;
}